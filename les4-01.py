# Задача 1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
#
# from sys import argv
# script_name, working_hours, hour_rate, bonus_percent = argv
# print((int(working_hours)*int(hour_rate))*(int(bonus_percent)+100)/100)

# Задача 2
# Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

#
# for el in first_list:
#     print(el-1)
#
# second_list = [el for el in first_list print(el)]


# Задача 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

# new_list =[el for el in range(20, 240, 1) if (el % 20) == 0 or (el % 21) == 0]
# print(new_list)

# Задача 4
# Представлен список чисел.
# Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести
# в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
# import random
#
# first_list = [ random.randint(0, 1000) for el in range(0, random.randint(0, 1000), 1)]
# new_list =[el for el in first_list if (first_list.count(el) == 1) ]
#
# print(f"Начальный список:{first_list}")
# print(f"Уникальные элементы:{new_list}")
#


# Задача 5

# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

# from functools import reduce
# first_list = [ el for el in range(100, 1001, 1) ]
# print(f"Список :{first_list}")
#
# result = reduce((lambda x, y: x * y),first_list)
# print(f"Результат: {result}")

# 5. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools.
#     Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#     еобходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие,
# при котором повторение элементов списка будет прекращено.

# from itertools import cycle
# from itertools import count
#
# print("Начать с:")
# first_value = int(input())
#
# с = 0
# for el in count(first_value):
#     if с > 10:
#         break
#     print(el)
#     с += 1
#
# b = 0
# second_value = "ABCDEF"
# for el in cycle(second_value):
#     if b > 10:
#         break
#     print(el)
#     b += 1


#
# 6. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить
# только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
#
# def generator(a):
#     temp = 1
#     for el in range(1, a+1, 1):
#
#         yield el
#     for tel in range(1, a + 1, 1):
#         temp=temp*tel
#
# g = generator(7)
# print(g)
# g = generator(7)
# print(g)
#
#
# c = 8
#
# for el in generator(c):
#     print(el)


